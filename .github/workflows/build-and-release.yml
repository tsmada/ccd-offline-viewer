name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x64
            platform: mac
            artifact_name: 'CCD Viewer-${{ github.event.inputs.version || github.ref_name }}.dmg'
            build_command: 'npm run dist:mac'
          - os: macos-latest
            arch: arm64
            platform: mac-arm64
            artifact_name: 'CCD Viewer-${{ github.event.inputs.version || github.ref_name }}-arm64.dmg'
            build_command: 'npm run dist:mac:arm64'
          - os: windows-latest
            arch: x64
            platform: win
            artifact_name: 'CCD Viewer Setup ${{ github.event.inputs.version || github.ref_name }}.exe'
            build_command: 'npm run dist:win'

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version in package.json
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          npm version --no-git-tag-version $VERSION

      - name: Build application
        run: ${{ matrix.build_command }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List dist contents (debug)
        shell: bash
        run: ls -la dist/

      - name: Find and rename artifacts
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "mac" ]; then
            # Find Intel DMG
            DMG_FILE=$(find dist -name "*.dmg" ! -name "*arm64*" | head -1)
            if [ -n "$DMG_FILE" ]; then
              mv "$DMG_FILE" "dist/CCD-Viewer-${{ github.event.inputs.version || github.ref_name }}-mac-intel.dmg"
              echo "ARTIFACT_PATH=dist/CCD-Viewer-${{ github.event.inputs.version || github.ref_name }}-mac-intel.dmg" >> $GITHUB_ENV
            fi
          elif [ "${{ matrix.platform }}" = "mac-arm64" ]; then
            # Find ARM64 DMG
            DMG_FILE=$(find dist -name "*arm64*.dmg" | head -1)
            if [ -n "$DMG_FILE" ]; then
              mv "$DMG_FILE" "dist/CCD-Viewer-${{ github.event.inputs.version || github.ref_name }}-mac-arm64.dmg"
              echo "ARTIFACT_PATH=dist/CCD-Viewer-${{ github.event.inputs.version || github.ref_name }}-mac-arm64.dmg" >> $GITHUB_ENV
            fi
          elif [ "${{ matrix.platform }}" = "win" ]; then
            # Find Windows installer
            EXE_FILE=$(find dist -name "*.exe" | head -1)
            if [ -n "$EXE_FILE" ]; then
              mv "$EXE_FILE" "dist/CCD-Viewer-${{ github.event.inputs.version || github.ref_name }}-windows-x64.exe"
              echo "ARTIFACT_PATH=dist/CCD-Viewer-${{ github.event.inputs.version || github.ref_name }}-windows-x64.exe" >> $GITHUB_ENV
            fi
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ccd-viewer-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts (debug)
        run: find artifacts -type f

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: CCD Viewer ${{ github.event.inputs.version || github.ref_name }}
          body: |
            ## CCD Viewer Release ${{ github.event.inputs.version || github.ref_name }}

            A modern, HIPAA-compliant Continuity of Care Document viewer built with pure Electron.

            ### 📦 Downloads

            - **macOS (Intel)**: `CCD-Viewer-*-mac-intel.dmg`
            - **macOS (Apple Silicon)**: `CCD-Viewer-*-mac-arm64.dmg` 
            - **Windows (x64)**: `CCD-Viewer-*-windows-x64.exe`

            ### ✨ Features

            - 🏥 Complete CCD/CDA document parsing
            - 🎨 6 stunning themes (Winamp, Healthcare, Dark, etc.)
            - 📤 Export to PDF, JSON, and CSV
            - 🔒 100% local processing (HIPAA-compliant)
            - 🖱️ Drag & drop interface
            - ⚡ Fast, lightweight, pure vanilla JavaScript

            ### 🚀 Installation

            1. Download the appropriate file for your platform
            2. **macOS**: Open the DMG and drag to Applications
            3. **Windows**: Run the EXE installer

            ### 🔧 System Requirements

            - **macOS**: 10.15+ (Catalina or later)
            - **Windows**: Windows 10/11 (x64)

            ---

            🎉 Built with Electron and vanilla JavaScript - no frameworks, maximum performance!
          draft: false
          prerelease: false
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}